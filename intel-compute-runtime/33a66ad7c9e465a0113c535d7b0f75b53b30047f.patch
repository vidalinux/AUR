From 33a66ad7c9e465a0113c535d7b0f75b53b30047f Mon Sep 17 00:00:00 2001
From: Sylvain Munaut <tnt@246tNt.com>
Date: Fri, 21 Jun 2024 20:00:53 +0200
Subject: [PATCH] fix: In Linux CL/GL sharing, always issue flush request
 before export

Apparently it's expected to flush the object (which might convert them
from one format to another for export, or remove aux buffer uses or
anything not supported by export).

Signed-off-by: Sylvain Munaut <tnt@246tNt.com>
---
 .../sharings/gl/linux/gl_buffer_linux.cpp     | 19 +++++++++++++++----
 .../sharings/gl/linux/gl_sharing_linux.cpp    |  7 +++++--
 .../sharings/gl/linux/gl_sharing_linux.h      |  2 +-
 .../sharings/gl/linux/gl_texture_linux.cpp    | 17 ++++++++++++++---
 4 files changed, 35 insertions(+), 10 deletions(-)

diff --git a/opencl/source/sharings/gl/linux/gl_buffer_linux.cpp b/opencl/source/sharings/gl/linux/gl_buffer_linux.cpp
index a0ef436cb03e3..0e2f9b29d781f 100644
--- a/opencl/source/sharings/gl/linux/gl_buffer_linux.cpp
+++ b/opencl/source/sharings/gl/linux/gl_buffer_linux.cpp
@@ -25,9 +25,11 @@ using namespace NEO;
 Buffer *GlBuffer::createSharedGlBuffer(Context *context, cl_mem_flags flags, unsigned int bufferId, cl_int *errcodeRet) {
     ErrorCodeHelper errorCode(errcodeRet, CL_SUCCESS);
 
-    /* Prepare export request */
+    /* Prepare flush & export request */
     struct mesa_glinterop_export_in objIn = {};
     struct mesa_glinterop_export_out objOut = {};
+    struct mesa_glinterop_flush_out flushOut = {};
+    int fenceFd = -1;
 
     objIn.version = 2;
     objIn.target = GL_ARRAY_BUFFER;
@@ -48,13 +50,22 @@ Buffer *GlBuffer::createSharedGlBuffer(Context *context, cl_mem_flags flags, uns
         return nullptr;
     }
 
+    flushOut.version = 1;
+    flushOut.fence_fd = &fenceFd;
+
     objOut.version = 2;
 
     /* Call MESA interop */
     GLSharingFunctionsLinux *sharingFunctions = context->getSharing<GLSharingFunctionsLinux>();
+    bool success;
+    int retValue;
+
+    success = sharingFunctions->flushObjectsAndWait(1, &objIn, &flushOut, &retValue);
+    if (success) {
+        retValue = sharingFunctions->exportObject(&objIn, &objOut);
+    }
 
-    int retValue = sharingFunctions->exportObject(&objIn, &objOut);
-    if ((retValue != MESA_GLINTEROP_SUCCESS) || (objOut.version != 2)) {
+    if (!success || (retValue != MESA_GLINTEROP_SUCCESS) || (objOut.version != 2)) {
         switch (retValue) {
         case MESA_GLINTEROP_INVALID_DISPLAY:
         case MESA_GLINTEROP_INVALID_CONTEXT:
@@ -235,4 +246,4 @@ void GlBuffer::releaseResource(MemObj *memObject, uint32_t rootDeviceIndex) {
     memoryManager->closeSharedHandle(memObject->getGraphicsAllocation(rootDeviceIndex));
 }
 
-void GlBuffer::callReleaseResource(bool createOrDestroy) {}
\ No newline at end of file
+void GlBuffer::callReleaseResource(bool createOrDestroy) {}
diff --git a/opencl/source/sharings/gl/linux/gl_sharing_linux.cpp b/opencl/source/sharings/gl/linux/gl_sharing_linux.cpp
index 0dd40cac2d9b6..292d02cddb5c8 100644
--- a/opencl/source/sharings/gl/linux/gl_sharing_linux.cpp
+++ b/opencl/source/sharings/gl/linux/gl_sharing_linux.cpp
@@ -122,10 +122,13 @@ GLboolean GLSharingFunctionsLinux::initGLFunctions() {
 
     return 1;
 }
-bool GLSharingFunctionsLinux::flushObjectsAndWait(unsigned count, struct mesa_glinterop_export_in *resources, struct mesa_glinterop_flush_out *out) {
+bool GLSharingFunctionsLinux::flushObjectsAndWait(unsigned count, struct mesa_glinterop_export_in *resources, struct mesa_glinterop_flush_out *out, int *retValPtr) {
     /* Call MESA interop */
     int retValue = flushObjects(1, resources, out);
-    if (retValue != MESA_GLINTEROP_SUCCESS) {
+    if (retValPtr) {
+        *retValPtr = retValue;
+    }
+    if ((retValue != MESA_GLINTEROP_SUCCESS) && (out->version == 1)) {
         return false;
     }
     auto fenceFd = *out->fence_fd;
diff --git a/opencl/source/sharings/gl/linux/gl_sharing_linux.h b/opencl/source/sharings/gl/linux/gl_sharing_linux.h
index 10c6433cce9d3..778f147831e48 100644
--- a/opencl/source/sharings/gl/linux/gl_sharing_linux.h
+++ b/opencl/source/sharings/gl/linux/gl_sharing_linux.h
@@ -95,7 +95,7 @@ class GLSharingFunctionsLinux : public GLSharingFunctions {
             return -ENOTSUP;
         }
     }
-    bool flushObjectsAndWait(unsigned count, struct mesa_glinterop_export_in *resources, struct mesa_glinterop_flush_out *out);
+    bool flushObjectsAndWait(unsigned count, struct mesa_glinterop_export_in *resources, struct mesa_glinterop_flush_out *out, int *retValPtr = nullptr);
     GLContext getBackupContextHandle() {
         return glHGLRCHandleBkpCtx;
     }
diff --git a/opencl/source/sharings/gl/linux/gl_texture_linux.cpp b/opencl/source/sharings/gl/linux/gl_texture_linux.cpp
index f7d4eda745c66..6cdc0b0d06384 100644
--- a/opencl/source/sharings/gl/linux/gl_texture_linux.cpp
+++ b/opencl/source/sharings/gl/linux/gl_texture_linux.cpp
@@ -39,9 +39,11 @@ Image *GlTexture::createSharedGlTexture(Context *context, cl_mem_flags flags, cl
     cl_image_format imgFormat = {};
     McsSurfaceInfo mcsSurfaceInfo = {};
 
-    /* Prepare export request */
+    /* Prepare flush & export request */
     struct mesa_glinterop_export_in texIn = {};
     struct mesa_glinterop_export_out texOut = {};
+    struct mesa_glinterop_flush_out flushOut = {};
+    int fenceFd = -1;
 
     texIn.version = 2;
     texIn.target = getBaseTargetType(target);
@@ -69,13 +71,22 @@ Image *GlTexture::createSharedGlTexture(Context *context, cl_mem_flags flags, cl
         return nullptr;
     }
 
+    flushOut.version = 1;
+    flushOut.fence_fd = &fenceFd;
+
     texOut.version = 2;
 
     /* Call MESA interop */
     GLSharingFunctionsLinux *sharingFunctions = context->getSharing<GLSharingFunctionsLinux>();
+    bool success;
+    int retValue;
+
+    success = sharingFunctions->flushObjectsAndWait(1, &texIn, &flushOut, &retValue);
+    if (success) {
+        retValue = sharingFunctions->exportObject(&texIn, &texOut);
+    }
 
-    int retValue = sharingFunctions->exportObject(&texIn, &texOut);
-    if ((retValue != MESA_GLINTEROP_SUCCESS) || (texOut.version != 2)) {
+    if (!success || (retValue != MESA_GLINTEROP_SUCCESS) || (texOut.version != 2)) {
         switch (retValue) {
         case MESA_GLINTEROP_INVALID_DISPLAY:
         case MESA_GLINTEROP_INVALID_CONTEXT:
